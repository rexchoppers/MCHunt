plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.rexchoppers'

// Allow overriding version from Gradle property "projectVersion" or env var "VERSION"
version = (project.findProperty('projectVersion') ?: System.getenv('VERSION')) ?: '1.0-SNAPSHOT'

repositories {
    maven {
        url "https://repo.md-5.net/content/groups/public/"
    }
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven { url "https://repo.dmulloy2.net/repository/public/" }
    maven { url 'https://jitpack.io' }


    maven { url = uri("https://repo.codemc.io/repository/maven-releases/") }
    maven { url = uri("https://repo.codemc.io/repository/maven-snapshots/") }

    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'

    compileOnly "org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT"
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.8.0";
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.6'
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.8'
    compileOnly 'me.libraryaddict.disguises:libsdisguises:11.0.7'

    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'net.wesjd:anvilgui:1.10.8-SNAPSHOT'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.github.rexchoppers:SmartInvs:2.0.0-alpha.3'

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier.set('') // Sets classifier to an empty string, which effectively makes this the main jar
    configurations = [project.configurations.runtimeClasspath] // Ensures all runtime dependencies are included
}


tasks.build {
    dependsOn shadowJar
}